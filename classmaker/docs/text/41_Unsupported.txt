[Home]

----

Unsupported Features
====================

Features not supported
----------------------

ClassMaker is intended to support Domain Specific Languages with very similar features to the java language.
With this in mind, ClassMaker supports most of the features of java and integrates seamlessly 
with most classes generated by a java complier.

However, some features are not supported; either because they are not implemented yet or because they are difficult
and would probably not be necessary for a DSL. 
It is possible that ClassMaker will support all java features in the future, but it is not there yet.

The initial release of ClassMaker supports most Java 1.4 language features.
Java 1.4 features not supported by ClassMaker include:
 * Method conversion to long, float and double
 * The ternary <code>?:</code> operator
 * Inner Classes
 * Initialisation of class member fields
 * Static code blocks
 
The features introduced in Java 1.5 and subsequent releases are not supported. These features include:
 * Generics 
 * Enhanced for Loop 
 * Autoboxing/Unboxing 
 * Typesafe Enums 
 * Varargs 
 * Static Import 
 * Metadata (Annotations) 
This is not an exhaustive list.

Unsupported Java 1.4 features
-----------------------------

_Method conversion to long, float and double_

The inability to perform method conversion from <code>int</code> to 
<code>long</code>, <code>float</code> or <code>double</code> is an inherent limitation of the way
that ClassMaker generates byte-code.

Which method to call is resolved after the parameters for the method are pushed onto the stack.
Consequently, by the time a method is selected it is too late to promote the parameters that
are on the stack.

The parameters to methods that require these types of conversions must be explicitly cast.

Having said all of that, where there is a will there is a way and it is possible that support may 
be added for these conversions in the future. 

_The ternary  <code>?:</code> operator-

The <code>?:</code> operator could be implemented as a variant of the if-then-else statement.
The main differences would be that it can be used in an expression and a result would be left on the stack.


_Inner Classes_

ClassMaker does not directly support Inner Classes. 

What changes would be required to support inner classes has not been investigated so it is not clear 
how much effort would be involved. It may be easier to attempt to implement a language that
supports inner classes, or closures which is a related feature, and amend ClassMaker as required.

_Initialisation of class member fields_

Class member fields cannot be initialised as they are declared. They must be initialised in the constructor. 


_Static code blocks_

There is no direct support for static code blocks or initialisation of static variables. 

It is theoretically possible to declare a static method called <code>clinit</code> with no parameters.
It just hasn't been tested yet.

_Disclaimer_

This list of unsupported Java 1.4 features is not exhaustive. There has been no gap analysis of the 
Java 1.4 specification. The list above are only those features that come to mind. 
If you come across a 1.4 feature that is not supported, raise a bug.

_Java 1.5 and beyond_

The features of Java 1.5 and beyond are not supported. 
This is not a design limitation, but the line had to be drawn somewhere.

Java 1.4 supports a rich and well rounded set of langauge features. 
It was used for a long time and was widely adopted.

Only supporting Java 1.4 features in the first release of ClassMaker makes sense.
It allows the library to be used for it's intended purpose, to generate byte-code for Domain Specific Languages,
with a useful, complete and well defined set of language constructs. 

The unsupported Java 1.4 features listed above will eventually be implemented. 
This is more likely because the list is limited in scope. 

The next step would be to make ClassMaker compatible with subsequently introduced language features,
without necessarily providing those features in ClassMaker. 
Compatibility with Generics is an obvious first step and would probably be more useful than support for
the remaining Java 1.4 features listed above. 

Please do not raise bugs against features of Java 1.5 or later until this documentation claims that the 
ClassMaker library supports the feature.

----

[Home]

